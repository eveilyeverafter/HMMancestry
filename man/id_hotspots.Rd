% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/infer-recom.R
\name{id_hotspots}
\alias{id_hotspots}
\title{Identify recombination points from state sequences}
\usage{
id_hotspots(state.vector)
}
\arguments{
\item{state.vector}{a vector of state values (0 or 1)}
}
\value{
a vector of length \code{state.vector} stating whether a recombination
event occured (1) or not (0).
}
\description{
This is a simple function that takes a vector of parental states
along a chromosome and identifies where states have changed. Note: In this method,
a single base pair mutation is indistinguishable from a double recombination event.
}
\examples{
# Example 1: simple
# A recombination occurred between snp 3 and 4 and between 8 and 9.
statepath <- c(0,0,0,1,1,1,1,1,0,0,0)
id_hotspots(state.vector=statepath)
which(id_hotspots(state.vector=statepath)==1)
#
# Example 2: complex
set.seed(1) # For reproducability
# simulate a recombination hotspot between the 99th and 100th snp
rec <- c(rep(0.001, 99), 0.4, rep(0.001, 99))
# simulate 500 spores en masse
n.spores <- 500
spores <- sim_en_masse(n.spores=n.spores, l=200, rec=rec,
 p.assign=.999, mu.rate=0.001, f.cross=0.5,
    f.convert=0.5, length.conversion=10, coverage=1)
# Convert to dataframe
snp.dat <- en_masse_to_df(spores)
# Infer states
states1 <- ddply(snp.dat, .(Tetrad, Spore, Chr), function(x){
    est_fwd_back(snp.dat=x, p.assign=0.999, p.trans=mean(rec))
    })
# ddply through each spore to find recombination points (rpts)
df <- ddply(states1, .(Spore), function(x){
    rpts <- which(id_hotspots(x$states_inferred)==1)
    npts <- length(rpts)
    return(data.frame(rpts=rpts))
    })
# Plot
hist(df$rpts, breaks=200, xlab="snp",
    main="recombination frequency")
}
\author{
Tyler D. Hether
}
\seealso{
\code{\link{sim_en_masse}}
}

